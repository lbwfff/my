#4-12，之后有时间再注释吧

library(GEOquery)
gset <- getGEO('GSE166162', destdir=".")
names(Meta(gset))
Table(gset)[1:5,1:5]

rm(list = ls())
a=read.table('GSE166162_series_matrix.txt.gz',
             sep = '\t',quote="",fill=T,
             comment.char = "!",header=T)#,header=T

for (i in 1:nrow(a)){
  x=a[i,1]  # 赋值
  x=as.character(x) #化作字符串
  V1=gsub('["]', '', x)  #去双引号
  a[i,1]=V1  #给矩阵重新赋值
}

rownames(a)<-a[,1]#每一列当成每行的行名，填2就是第二列
a<-a[,-1]

class(a)
str(a)#了解a是什么

group_list<-c("Young sham","Young sham","Young sham","Aged sham","Aged sham","Aged sham","Young MCAO","Young MCAO","Young MCAO","Aged MCAO","Aged MCAO","Aged MCAO")

library(rat2302.db)
ls("package:rat2302.db")

ids=toTable(rat2302SYMBOL)#输出ids数据，数据中对探针做出了注释
save(ids,a, file='input.Rdata')#将ids，a，pdata数据集合输出为input.Rdate,如果我没猜错的话，
length(unique(ids$symbol))#输出不重复的基因的数量
tail(sort(table(ids$symbol)))#出现频率最高的基因的数量
table(sort(table(ids$symbol)))

plot(table(sort(table(ids$symbol))))#做了个简图

exprSet=a
table(rownames(exprSet) %in% ids$probe_id)
exprSet=exprSet[rownames(exprSet) %in% ids$probe_id,]
dim(exprSet)

ids=ids[match(rownames(exprSet),ids$probe_id),]
head(ids)
exprSet[1:5,1:5] 

if(F){
  tmp = by(exprSet,ids$symbol,
           function(x) rownames(x)[which.max(rowMeans(x))] )
  fix(exprSet)
  probes = as.character(tmp)#输出了一个probes数据
  dim(exprSet)
  exprSet=exprSet[rownames(exprSet) %in% probes ,]
  dim(exprSet)
  
  rownames(exprSet)=ids[match(rownames(exprSet),ids$probe_id),2]#把探针名替换为了基因名
  exprSet[1:5,1:5]
}


identical(ids$probe_id,rownames(exprSet))#验证了一个看不懂的东西
dat=exprSet#因为下面的代码时copy的，所以改这么一句就很方便
ids$median=apply(dat,1,median) #ids新建median这一列，列名为median，同时对dat这个矩阵按行操作，取每一行的中位数，将结果给到median这一列的每一行
ids=ids[order(ids$symbol,ids$median,decreasing = T),]#对ids$symbol按照ids$median中位数从大到小排列的顺序排序，将对应的行赋值为一个新的ids
ids=ids[!duplicated(ids$symbol),]#将symbol这一列取取出重复项，'!'为否，即取出不重复的项，去除重复的gene ，保留每个基因最大表达量结果s
dat=dat[ids$probe_id,] #新的ids取出probe_id这一列，将dat按照取出的这一列中的每一行组成一个新的dat
rownames(dat)=ids$symbol#把ids的symbol这一列中的每一行给dat作为dat的行名
dat[1:4,1:4]  #保留每个基因ID第一次出现的信息
dim(dat)

exprSet=dat
exprSet['GAPDH',]#看了一下GAPDH在每个sample中的表达
boxplot(exprSet[,1])#对第一列基因的表达作了图
boxplot(exprSet['GAPDH',])#对GAPDH的表达作图
exprSet['ACTB',]#就是β-actin的表达

library(reshape2)
exprSet<-as.matrix(exprSet)
exprSet_L=melt(exprSet)#把矩阵中所有的数据放到了两列？melt是什么
colnames(exprSet_L)=c('probe','sample','value')#改了列位置吗？不太确定
exprSet_L$group=rep(group_list,each=nrow(exprSet))#添加了group列
head(exprSet_L)#检视了前几个数据

library(ggplot2)
p=ggplot(exprSet_L,
         aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)#利用exprSet_L来作图，先是每个sample的箱图
p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_violin()
print(p)#小提琴图
p=ggplot(exprSet_L,aes(value,fill=group))+geom_histogram(bins = 200)+facet_wrap(~sample, nrow = 4)
print(p)#分面图？还是什么东西
p=ggplot(exprSet_L,aes(value,col=group))+geom_density()+facet_wrap(~sample, nrow = 4)
print(p)#和上图类似的一个图形
p=ggplot(exprSet_L,aes(value,col=group))+geom_density() 
print(p)#密度图？
p=ggplot(exprSet_L,aes(x=sample,y=value,fill=group))+geom_boxplot()
p=p+stat_summary(fun.y="mean",geom="point",shape=23,size=3,fill="red")
p=p+theme_set(theme_set(theme_bw(base_size=20)))
p=p+theme(text=element_text(face='bold'),axis.text.x=element_text(angle=30,hjust=1),axis.title=element_blank())
print(p)

g_mean <- tail(sort(apply(exprSet,1,mean)),50)
g_median <- tail(sort(apply(exprSet,1,median)),50)
g_max <- tail(sort(apply(exprSet,1,max)),50)
g_min <- tail(sort(apply(exprSet,1,min)),50)
g_sd <- tail(sort(apply(exprSet,1,sd)),50)
g_var <- tail(sort(apply(exprSet,1,var)),50)
g_mad <- tail(sort(apply(exprSet,1,mad)),50)
g_mad
names(g_mad)#完全没懂

library(pheatmap)
choose_gene=names(tail(sort(apply(exprSet,1,mad)),50))#上个单元筛选了一些基因，在这用到了exprSet,1,mad,能这样理解吗？
choose_matrix=exprSet[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix)

library(UpSetR)
g_all <- unique(c(names(g_mean),names(g_median),names(g_max),names(g_min),
                  names(g_sd),names(g_var),names(g_mad) ))
dat=data.frame(g_all=g_all,
               g_mean=ifelse(g_all %in%  names(g_mean) ,1,0),
               g_median=ifelse(g_all %in%  names(g_median) ,1,0),
               g_max=ifelse(g_all %in%  names(g_max) ,1,0),
               g_min=ifelse(g_all %in%  names(g_min) ,1,0),
               g_sd=ifelse(g_all %in%  names(g_sd) ,1,0),
               g_var=ifelse(g_all %in%  names(g_var) ,1,0),
               g_mad=ifelse(g_all %in%  names(g_mad) ,1,0)
)
upset(dat,nsets = 7)

group_list
dim(exprSet)
exprSet[1:5,1:5]

colnames(exprSet)=paste(group_list,1:12,sep='')
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19), 
                cex = 0.7, col = "blue")
hc=hclust(dist(t(exprSet)))
par(mar=c(5,5,5,10)) 
plot(as.dendrogram(hc), nodePar = nodePar,  horiz = TRUE)

library(ggfortify)
df=as.data.frame(t(exprSet))
df$group=group_list 
autoplot(prcomp( df[,1:(ncol(df)-1)] ), data=df,colour = 'group')

library("FactoMineR")#画主成分分析图需要加载这两个包
library("factoextra") 
df=as.data.frame(t(exprSet))
dat.pca <- PCA(df, graph = FALSE)#现在dat最后一列是group_list，需要重新赋值给一个dat.pca,这个矩阵是不含有分组信息的
fviz_pca_ind(dat.pca,
             geom.ind = "point", # show points only (nbut not "text")
             col.ind = group_list, # color by groups
             # palette = c("#00AFBB", "#E7B800"),
             addEllipses = TRUE, # Concentration ellipses
             legend.title = "Groups"
)


group_list
dat = exprSet
group1 = which(group_list == levels(group_list)[1])
group2 = which(group_list == levels(group_list)[2])
group3 = which(group_list == levels(group_list)[3])
group4 = which(group_list == levels(group_list)[4])
dat1 = dat[, group1]
dat2 = dat[, group2]
dat3 = dat[, group3]
dat4 = dat[, group4]
dat = cbind(dat3,dat4)
ygroup_list<-c("YoungMACO","YoungMACO","YoungMACO","Yongsham","Yongsham","Yongsham")

pvals = apply(dat, 1, function(x){
  t.test(as.numeric(x)~ygroup_list)$p.value
})
p.adj = p.adjust(pvals, method = "BH")
avg_3 = rowMeans(dat3)
avg_4 = rowMeans(dat4)
log2FC = avg_3-avg_4
DEG_t.test = cbind(avg_3, avg_4, log2FC, pvals, p.adj)
DEG_t.test=DEG_t.test[order(DEG_t.test[,4]),]
DEG_t.test=as.data.frame(DEG_t.test)
head(DEG_t.test)

suppressMessages(library(limma)) 
design <- model.matrix(~0+factor(ygroup_list))
colnames(design)=levels(factor(ygroup_list))
rownames(design)=colnames(dat)
design

contrast.matrix<-makeContrasts(paste0(unique(ygroup_list),collapse = "-"),levels = design)
contrast.matrix 

fit <- lmFit(dat,design)
##step2
fit2 <- contrasts.fit(fit, contrast.matrix) ##这一步很重要，大家可以自行看看效果
fit2 <- eBayes(fit2)  ## default no trend !!!
##eBayes() with trend=TRUE
##step3
tempOutput = topTable(fit2, coef=1, n=Inf)
nrDEG = na.omit(tempOutput) 
#write.csv(nrDEG2,"limma_notrend.results.csv",quote = F)
head(nrDEG)

write.table(nrDEG,"nrDEG.csv",sep=",")#不知道为什么就空了一行，不过影响倒是不大
DEG=nrDEG
logFC_cutoff <- with(DEG,mean(abs( logFC)) + 2*sd(abs( logFC)) )
DEG$change = as.factor(ifelse(DEG$P.Value < 0.05 & abs(DEG$logFC) > logFC_cutoff,
                              ifelse(DEG$logFC > logFC_cutoff ,'UP','DOWN'),'NOT')
)
this_tile <- paste0('Cutoff for logFC is ',round(logFC_cutoff,3),
                    '\nThe number of up gene is ',nrow(DEG[DEG$change =='UP',]) ,
                    '\nThe number of down gene is ',nrow(DEG[DEG$change =='DOWN',])
)
this_tile
head(DEG)
g = ggplot(data=DEG, aes(x=logFC, y=-log10(P.Value), color=change)) +
  geom_point(alpha=0.4, size=1.75) +
  theme_set(theme_set(theme_bw(base_size=20)))+
  xlab("log2 fold change") + ylab("-log10 p-value") +
  ggtitle( this_tile  ) + theme(plot.title = element_text(size=15,hjust = 0.5))+
  scale_colour_manual(values = c('blue','black','red'))  ## corresponding to the levels(res$change)
print(g)

head(nrDEG)
head(DEG_t.test)
DEG_t.test=DEG_t.test[rownames(nrDEG),]
plot(DEG_t.test[,3],nrDEG[,1]) ## 可以看到logFC是相反的
plot(DEG_t.test[,4],nrDEG[,4]) # 可以看到使用limma包和t.test本身的p值差异尚可接受
plot(-log10(DEG_t.test[,4]),-log10(nrDEG[,4]))

## heatmap 
library(pheatmap)
choose_gene=head(rownames(nrDEG),25)
choose_matrix=exprSet[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix)
