rm(list = ls())
library(airway)

## 表达矩阵来自于R包：  airway
# 如果当前工作目录不存在文件：'airway_exprSet.Rdata' 
# 就运行下面 if 代码块内容，载入R包airway及其数据集airway后拿到表达矩阵和表型信息
if(!file.exists('airway_exprSet.Rdata')){
  library(airway)
  data(airway)
  exprSet=assay(airway)
  group_list=colData(airway)[,3]
  save(exprSet,group_list,file = 'airway_exprSet.Rdata')
}
# 大家务必注意这样的代码技巧，多次存储Rdata文件。
# 存储后的Rdata文件，很容易就加载进入R语言工作环境。
load(file = 'airway_exprSet.Rdata')
table(group_list)
# 下面代码是为了检查
if(T){
  colnames(exprSet)
  pheatmap::pheatmap(cor(exprSet))
  group_list
  tmp=data.frame(g=group_list)
  rownames(tmp)=colnames(exprSet)
  # 组内的样本的相似性理论上应该是要高于组间的
  # 但是如果使用全部的基因的表达矩阵来计算样本之间的相关性
  # 是不能看到组内样本很好的聚集在一起。
  pheatmap::pheatmap(cor(exprSet),annotation_col = tmp)
  dim(exprSet)
  # 所以我这里初步过滤低表达量基因。
  exprSet=exprSet[apply(exprSet,1, function(x) sum(x>1) > 5),]
  dim(exprSet)
  
  exprSet=log(edgeR::cpm(exprSet)+1)
  dim(exprSet)
  # 再挑选top500的MAD值基因
  exprSet=exprSet[names(sort(apply(exprSet, 1,mad),decreasing = T)[1:500]),]
  dim(exprSet)
  M=cor(log2(exprSet+1))
  tmp=data.frame(g=group_list)
  rownames(tmp)=colnames(M)
  pheatmap::pheatmap(M,annotation_col = tmp)
  # 现在就可以看到，组内样本很好的聚集在一起
  # 组内的样本的相似性是要高于组间
  pheatmap::pheatmap(M,annotation_col = tmp,filename = 'cor.png')
  
  
  
  library(pheatmap)
  pheatmap(scale(cor(log2(exprSet+1))))
  
}

rm(list = ls())
options(stringsAsFactors = F)
load(file = 'airway_exprSet.Rdata')
group_list
group_list=relevel(group_list,ref = 'untrt')
source('run_DEG_RNA-seq.R')
# 这个 run_DEG_RNAseq 函数，是我自定义的
# 主要是包装了3个RNA-seq数据分析的R包
# 以及部分可视化函数
run_DEG_RNAseq(exprSet,group_list,
               g1="untrt",g2="trt",
               pro='airway')


rm(list = ls())
options(stringsAsFactors = F)
load('airway_DEG_results.Rdata')
source('run_DEG_RNA-seq.R')
deg=getDEGs(DEG_DEseq2,DEG_edgeR,DEG_limma_voom,thre_logFC=1,thre_p=0.05)


library(ggplot2)
library(clusterProfiler)
library(org.Hs.eg.db)
gene_up= bitr(unique(deg$up), fromType = "ENSEMBL",
              toType = c( "ENTREZID"),
              OrgDb = org.Hs.eg.db)[,2] 

gene_down= bitr(unique(deg$down), fromType = "ENSEMBL",
                toType = c( "ENTREZID"),
                OrgDb = org.Hs.eg.db)[,2] 
gene_diff=c(gene_up,gene_down) 

source('kegg_and_go_up_and_down.R')
# 同样的，里面包装了一些代码，比如setReadable函数
# 很有可能你使用的时候就发现过期了里面有一些参数
# 要学会调试代码，不要畏手畏脚。
run_kegg(gene_up,gene_down,pro='airway_test')
# 需要多go数据库的3个条目进行3次富集分析，非常耗时。
run_go(gene_up,gene_down,pro='airway_test')
# 很多绘图代码，都是依据数据本身特性需要调整的，而且高阶情况下需要AI等等。
go <- enrichGO(gene_up, OrgDb = "org.Hs.eg.db", ont="all") 
barplot(go, split="ONTOLOGY")+ facet_grid(ONTOLOGY~., scale="free") 
ggsave('gene_up_GO_all_barplot.png')
go <- enrichGO(gene_down, OrgDb = "org.Hs.eg.db", ont="all") 
barplot(go, split="ONTOLOGY",font.size =10)+ 
  facet_grid(ONTOLOGY~., scale="free") + 
  scale_x_discrete(labels=function(x) str_wrap(x, width=50))+
  ggsave('gene_down_GO_all_barplot.png')
