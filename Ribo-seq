#####hcc-ribo数据，最近在做的######

#####共十个样本，每个样本四个数据，下载的数据已经没有接头了，这边直接去rRNA########

for i in LC001 LC033 LC034 LC501 LC502 LC505 LC506 LC507 LC508 LC509
do
bowtie2 -x ~/biodata/index/rRNA/rRNA.homo_sapiens --un-gz "$i"_normal_RPF.derRNA.fq.gz -U raw/"$i"_normal_RPF.fastq.gz -p 18 -S "$i"_normal_RPF.rRNA.mapped.sam 2>"$i"_normal_RPF.log
bowtie2 -x ~/biodata/index/rRNA/rRNA.homo_sapiens --un-gz "$i"_normal_totalRNA.derRNA.fq.gz -U raw/"$i"_normal_totalRNA.fastq.gz -p 18 -S "$i"_normal_total.rRNA.mapped.sam 2>"$i"_normal_totalRNA.log
bowtie2 -x ~/biodata/index/rRNA/rRNA.homo_sapiens --un-gz "$i"_tumor_RPF.derRNA.fq.gz -U raw/"$i"_tumor_RPF.fastq.gz -p 18 -S "$i"_tumor_RPF.rRNA.mapped.sam 2>"$i"_tumor_RPF.log
bowtie2 -x ~/biodata/index/rRNA/rRNA.homo_sapiens --un-gz "$i"_tumor_totalRNA.derrRNA.fq.gz -U raw/"$i"_tumor_totalRNA.fastq.gz -p 18 -S "$i"_tumor_totalRNA.rRNA.mapped.sam 2>"$i"_tumor_totalRNA.log
done

#####RPF的reads都特别短（这种长度分布也是质控的重要一环），hisat2无法很好的适应这种情况，这种时候可以用star######
#####star真是慢啊，不过功能是真的多，某些情况下mapping长的reads也可以考虑一下star####
source activate p3
for i in LC001 LC033 LC034 LC501 LC502 LC505 LC506 LC507 LC508 LC509
do
STAR --runThreadN 18 --genomeDir ~/biodata/index/GRCh38 --readFilesIn rmrRNA/"$i"_normal_RPF.derRNA.fq.gz --outFilterType BySJout --outFilterMismatchNmax 2 --outSAMtype SAM --quantMode TranscriptomeSAM --outFilterMultimapNmax 1 --outFilterMatchNmin 16 --outFileNamePrefix "$i"_normal_RPF --readFilesCommand zcat
STAR --runThreadN 18 --genomeDir ~/biodata/index/GRCh38 --readFilesIn rmrRNA/"$i"_normal_totalRNA.derRNA.fq.gz --outFilterType BySJout --outFilterMismatchNmax 2 --outSAMtype SAM --quantMode TranscriptomeSAM --outFilterMultimapNmax 1 --outFilterMatchNmin 16 --outFileNamePrefix "$i"_normal_totalRNA --readFilesCommand zcat
STAR --runThreadN 18 --genomeDir ~/biodata/index/GRCh38 --readFilesIn rmrRNA/"$i"_tumor_RPF.derRNA.fq.gz --outFilterType BySJout --outFilterMismatchNmax 2 --outSAMtype SAM --quantMode TranscriptomeSAM --outFilterMultimapNmax 1 --outFilterMatchNmin 16 --outFileNamePrefix "$i"_tumor_RPF --readFilesCommand zcat
STAR --runThreadN 18 --genomeDir ~/biodata/index/GRCh38 --readFilesIn rmrRNA/"$i"_tumor_totalRNA.derrRNA.fq.gz --outFilterType BySJout --outFilterMismatchNmax 2 --outSAMtype SAM --quantMode TranscriptomeSAM --outFilterMultimapNmax 1 --outFilterMatchNmin 16 --outFileNamePrefix "$i"_tumor_totalRNA --readFilesCommand zcat
done

####后来重新改了一下star的参数，可以直接数据sort后的bam文件，在后续的步骤里可以方便一些#####
STAR --runThreadN 18 --genomeDir ~/biodata/index/GRCh38 --readFilesIn rmrRNA/"$i"_normal_RPF.derRNA.fq.gz --outFilterType BySJout --outFilterMismatchNmax 2 --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM --outFilterMultimapNmax 1 --outFilterMatchNmin 16 --outFileNamePrefix "$i"_normal_RPF --readFilesCommand zcat --outReadsUnmapped None 

####直接输出bam的话就不需要下面这步了######
for i in LC001 LC033 LC034 LC501 LC502 LC505 LC506 LC507 LC508 LC509
do
samtools view -bSq 10 -@ 15 -F 4 -F 256 afm/"$i"_normal_RPFAligned.out.sam -o "$i"_normal_RPF.bam
samtools view -bSq 10 -@ 15 -F 4 -F 256 afm/"$i"_normal_totalRNAAligned.out.sam -o "$i"_normal_totalRNA.bam
samtools view -bSq 10 -@ 15 -F 4 -F 256 afm/"$i"_tumor_RPFAligned.out.sam -o "$i"_tumor_RPF.bam
samtools view -bSq 10 -@ 15 -F 4 -F 256 afm/"$i"_tumor_totalRNAAligned.out.sam -o "$i"_tumor_totalRNA.bam
done

####忘记htseq怎么用了，这边用的featureCounts，应该没有什么区别######
featureCounts -T 18 -a ~/biodata/annotation/gencode.v35.annotation.sorted.gtf -o hccribo.count -g gene_id *.bam

###之后用xtail进行分析####
###xtail这个包实在太久没有更新了，只能通过docker载入####

docker run --name=xtail -dt  -h yanglab --restart unless-stopped -v ~/share:/home/test/share yanglab/xtail ##第一次需要这个##
docker start 558cd9319f66 ####之后用这个进入停止的xtail容器#####
docker exec -it xtail bash ##进入容器###
docker stop xtail ###停止容器容器####
cd /home/test/share
R

###以下是R代码######
###处理count矩阵#####
library(xtail)
hcc<-read.table('hccribo.count',header = T)
hcc<-hcc[,-(2:5)]
length<-hcc[,1:2]
hcc<-hcc[,-2]
rownames(hcc)<-hcc[,1]
hcc<-hcc[,-1]
####用循环来做分析#####
list<-c('LC001','LC033','LC034','LC501','LC502','LC505','LC506','LC507','LC508','LC509')
for (i in list){
exp<-hcc[,grep(i,colnames(hcc))]
mrna<-exp[,grep('totalRNA',colnames(exp))]
rpf <-exp[,grep('RPF',colnames(exp))]
condition <- c('normal','tumor')
results <- xtail(mrna,rpf,condition,bins=10000)
tab <- resultsTable(results)
path<-paste0(i,'result.txt')
write.table(tab,path,quote=F,sep="\t")
###FC图####
path<-paste0(i,'FCs.pdf')
pdf(file=path,width=6,height=6)
plotFCs(results)
dev.off()
###Rs图####
path<-paste0(i,'Rs.pdf')
pdf(file=path,width=6,height=6)
plotRs(results)
dev.off()
###存一下数据###
path<-paste0(i,'results.RData')
save(results,file=path)
###火山图#####
path<-paste0(i,'volcanoPlot.pdf')
pdf(file=path,width=6,height=6)
volcanoPlot(results)
dev.off()
}
####火山图并没有正常输出，不知道为什么####

q() ####退出R####
exit ####退出容器#####

#####不考虑肿瘤的异质性的话，可以一起分析，用riborex#####
hcc<-read.table('hccribo.count',header = T)
hcc<-hcc[,-(2:5)]
length<-hcc[,1:2]
hcc<-hcc[,-2]
rownames(hcc)<-hcc[,1]
hcc<-hcc[,-1]

library(riborex)
RNACntTable<-hcc[,grep('totalRNA',colnames(hcc))]
RiboCntTable<-hcc[,grep('RPF',colnames(hcc))]
head(RNACntTable,5)
head(RiboCntTable,5)

rnaCond <- c("normal", "tumor", "normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor")
riboCond <- c("normal", "tumor", "normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor")
res.deseq2 <- riborex(RNACntTable, RiboCntTable, rnaCond, riboCond,engine = "DESeq2")
res.deseq2
summary(res.deseq2)
write.csv(res.deseq2, "riborex_res_deseq2.csv")

####ribotricer可以做CDS的预测，画metagene图，长度分布什么的，还是挺方便的######
source activate ribotricer
for i in LC001 LC033 LC034 LC501 LC502 LC505 LC506 LC507 LC508 LC509
do
ribotricer detect-orfs --bam ~/biodata/hcc-ribo/"$i"_tumor_RPF.sort.bam --ribotricer_index test_candidate_orfs.tsv --prefix "$i"_tumor_RPF --phase_score_cutoff 0.440
ribotricer detect-orfs --bam ~/biodata/hcc-ribo/"$i"_normal_RPF.sort.bam --ribotricer_index test_candidate_orfs.tsv --prefix "$i"_normal_RPF --phase_score_cutoff 0.440
done

#####RiboDiPA是一个R包，好像能画的还挺多的，有时间可以玩一下#######
library('RiboDiPA')
classlabel <- data.frame(
  condition = c("normal", "tumor", "normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor", "normal", "tumor","normal", "tumor","normal", "tumor","normal", "tumor"),
  comparison = c(1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2)
)
rownames(classlabel) <- c("LC001_normal","LC001_tumor",
                          "LC033_normal","LC033_tumor",
                          "LC034_normal","LC034_tumor",
                          "LC501_normal","LC501_tumor",
                          "LC502_normal","LC502_tumor",
                          "LC505_normal","LC505_tumor",
                          "LC506_normal","LC506_tumor",
                          "LC507_normal","LC507_tumor",
                          "LC508_normal","LC508_tumor",
                          "LC509_normal","LC509_tumor" )
path<-paste0('~/biodata/hcc-ribo/',rownames(classlabel),'_RPF.sort.bam')
result.pst <- RiboDiPA(path, '~/biodata/annotation/gencode.v35.annotation.sorted.gtf', classlabel, cores = 15)
save(result.pst,file =('~/biodata/hcc-ribo/ribodipa.RData'))

#上面那一段我没有跑出来，可能是内存不够还是什么？不大明白，但是下面这一段是没有问题的。
library('RiboDiPA')
list<-c('~/share/mapping/genome/SRR10441364Aligned.sortedByCoord.out.bam',
	        '~/share/mapping/genome/SRR10441365Aligned.sortedByCoord.out.bam')
data.psite <- psiteMapping(bam_file_list = list, 
			   '~/biodata/annotation/gencode.v35.annotation.sorted.gtf', psite.mapping = "auto", cores = 2) #跑这个特别慢，最好还是挂在后台
save(data.psite,file = 'test.RData')
load('../for_ribodipa/test.RData')
data.psite$psite.mapping
plotTrack(data = data.psite, genes.list = c("ENSG00000023909.10", "ENSG00000035687.10"),
	            replicates = NULL, exons = FALSE) #然后就可以画track，结果应该是矫正off-set的，不过好像，不大好加注释？
             
########################仔细比较以下自己的pipi和ribocode1的pip
cutadapt -m 20 --match-read-wildcards -a (Adapter sequence) -o <Trimmed fastq file> <Input fastq file>

bowtie-build <rRNA.fa> rRNA
bowtie -p 8 -norc --un <un_aligned.fastq> -q <SRR1630831.fastq> rRNA <HEK293_rRNA.align>

STAR --runThreadN 8 --runMode genomeGenerate --genomeDir <hg19_STARindex>
--genomeFastaFiles <hg19_genome.fa> --sjdbGTFfile <gencode.v19.annotation.gtf>

STAR --outFilterType BySJout --runThreadN 8 --outFilterMismatchNmax 2 --genomeDir <hg19_STARindex>
--readFilesIn <un_aligned.fastq>  --outFileNamePrefix <HEK293> --outSAMtype BAM
SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --outFilterMultimapNmax 1
--outFilterMatchNmin 16 --alignEndsType EndToEnd
####我基本就是按照他的pip改的，这样写有一个问题就是因为太短而被丢弃的reads很多，可是如果连16个碱基都没有的reads在找orf时也不会被用到啊，我不明白。

STAR (v2.4.2a): STAR --runThreadN 23 --runMode alignReads --outFilterMultimapNmax 1 --outFilterType BySJout --outSAMattributes All --outSAMtype BAM SortedByCoordinate
#######这是GSE166544的参数，这个系列的数据用我的pip跑会因为reads太短和错配太多几乎得不到结果
#######首先他这个条件特别松，错配数，最小的匹配数，都按照默认的跑了，然后是outSAMattributes这个参数输出了很多（不过这个应该不是很关键，只是对reads的描述更多了）
#######那么问题来了，我是不是对mapping的要求太高了，我应该降低这个要求吗？

